package connectors;

import service.Main;

import java.sql.*;

public class DataBaseConnector {

    private static final String JDBC_URL = "jdbc:hsqldb:mem:OrdersDB";
    private Connection connection;
    private Statement statement;
    private ResultSet resultSet;
    private boolean isConneted;

    /**
     * This method invokes methods: connectToDatabase() and createDB()
     * inside of the constructor.
     */
    public DataBaseConnector() {
        this.connectToDatabase();
        this.createDB();
    }

    /**
     * This method check if number given by user exists in database.
     *
     * @param givenClientID is ID given by user.
     * @return flag if Client ID exists or not.
     */
    public boolean checkIfClientIDExists(String givenClientID) {

        if (givenClientID == null) {
            return false;
        }

        if ((resultSet =
                executeSQL("SELECT CLIENT_ID FROM ORDERS_DATABASE")) == null) {
            System.out.println("\n#WARNING: SQL query is not valid.\n");
            return false;
        }

        while (true) {
            try {
                if (!resultSet.next()) {
                    break;
                }
                String clientID = resultSet.getString("CLIENT_ID");
                if (clientID.equals(givenClientID)) {
                    return true;
                }
            } catch (SQLException e) {
                if (Main.DEBUG) {
                    e.printStackTrace();
                }
                System.out.println("\n#WARNING: Database access error.\n");
                return false;
            }
        }
        System.out.println("\n#WARNING: Client id: " + givenClientID
                + " does not exist in database.\n");
        return false;
    }

    /**
     * This method afford the access to private attribute.
     *
     * @return isConnected attribute.
     */
    public boolean getIsConneted() {
        return isConneted;
    }

    /**
     * This method afford the access to private attribute.
     *
     * @return resultset attribute.
     */
    public ResultSet getResultSet() {
        return resultSet;
    }

    /**
     * This method opening connection to database.
     */
    private void connectToDatabase() {
        boolean result = true;
        try {
            connection = DriverManager.getConnection(JDBC_URL);
        } catch (SQLException e) {
            if (Main.DEBUG) {
                e.printStackTrace();
            }
            System.out.println("\n#WARNING: Database connection error.\n");
            result = false;
        }
        this.isConneted = result;
    }

    /**
     * This method create new, empty table in database.
     */
    private void createDB() {
        if (connection != null) {
            executeSQL("CREATE TABLE ORDERS_DATABASE\n"
                    + "(\n"
                    + "ID_ORDDER INTEGER GENERATED BY DEFAULT "
                    + "AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,\n"
                    + "CLIENT_ID VARCHAR(6) NOT NULL,\n"
                    + "REQUEST_ID BIGINT NOT NULL,\n"
                    + "NAME VARCHAR(255) NOT NULL,\n"
                    + "QUANTITY INTEGER NOT NULL,\n"
                    + "PRICE DECIMAL NOT NULL\n"
                    + ");");
        }
    }

    /**
     * This method executes SQL query.
     *
     * @param sql is the String representation of query to database.
     * @return reference to resultset.
     */
    public ResultSet executeSQL(String sql) {
        if (Main.DEBUG) {
            System.out.println(sql);
        }
        try {
            statement = connection.createStatement();
            resultSet = statement.executeQuery(sql);
        } catch (SQLException e) {
            if (Main.DEBUG) {
                e.printStackTrace();
            }
            System.out.println("\n#WARNING: Database access error.\n");
            resultSet = null;
        }
        return resultSet;
    }

    /**
     * This method closes the connection to database.
     */
    public void close() {
        try {
            resultSet.close();
            statement.execute("SHUTDOWN");
            statement.close();
            connection.close();
        } catch (SQLException e) {
            if (Main.DEBUG) {
                e.printStackTrace();
            }
        }
    }
}




